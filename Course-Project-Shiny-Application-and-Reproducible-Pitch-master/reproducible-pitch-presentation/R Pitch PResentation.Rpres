Reproducible Pitch Presentation 
========================================================

Author: Omer Shechter

Date: 2 December 2018 



2017 Car crash data in Allegheny County
========================================================
transition: rotate

<font size = "5">This Application uses data about car's accidents in Allegheny County in the US, To demonstrate various capabilities from the Developing Data Products Course.
The Application provides visualization about car accidents in Allegheny County in 2017.


- Using Shiny UI Server Application. 
- Using Leaflet interactive MAP application. 
- Adding customized markers, and Popup. 
- Two Input Widget (Drop down list and Slide Bar).
- Using Reactive function. 
- Server Business logic (Subsetting data frame based on input).
- Full help page (Documentation)</font>.

<font size = "6">Shiny Applicatio Link : https://omersect.shinyapps.io/project/ </font>
<font size = "6">Github Repository Link : https://github.com/omershect/Course-Project-Shiny-Application-and-Reproducible-Pitch </font>


The Data 
========================================================
transition: rotate
<font size = "5">
- Data link: https://data.wprdc.org/datastore/dump/bf8b3c7e-8d60-40df-9134-21606a451c1a
- Data contains information on all accidents in Allegheny County in 2017.
- Data used: </font>
<font size = "4">
- Geo Location data. 
- Months of the Accident. 
- AUTOMOBILE_COUNT -  the number of cars involved. 
- FATAL_COUNT - Total number of death. 
- ILLEGAL_DRUG_RELATED - Ilegal drug involvement. 
- DRINKING_DRIVER Number of Drunk People involved in the car accident. 
- INJURY_COUNT - Number of injuries. 
- Fatal And INJURY - Will be used to classifying the type of the accident 
    And create different Icons. 


</font>
Data and Server calculations 
========================================================
The following calculations are done in the server :
- Load data. 
- Subset data - remove the accidents with zero cars involved. 
- Remove NA items.
- Create new columns which classify the accident (Death/Injury/None).
- Check the Min and Max cars number involved and pass it to the slider input.
- Slice the dataset dynamically based on Month selection and the number of cars selection. 


Data and Server calculation (Cont.)
========================================================

<font size = "7">
Data str
</font>
<font size = "5">
```{r, echo=FALSE}
library(tidyr)
library(dplyr)
DF<-read.csv("../CarCrash2017.csv") 

#Subset the location of the car crash (Latitude and longtiutiate)
# To show the information on  a Leaflet MAP 

#Subset only the accidents which the at least one car is involved.

#Keep the data about the month of the accident.
#Create a new column with the month's names instead of a number. 
#Since there is a large number of the crash 
#There will be an option to show car crash per specific month
#For information to present in a popup :
#AUTOMOBILE_COUNT -  the number of cars involved 
#FATAL_COUNT - Total number of death 
#ILLEGAL_DRUG_RELATED - Ilegal drug involvement 
#DRINKING_DRIVER Number of Drunk People involved in the car accident 
#INJURY_COUNT - Number of injuries 
#Fatal And INJURY - Will be used to classifying the type of the accident 
#And create different Icons 

dfCrash<-select(DF,DEC_LAT,DEC_LONG,CRASH_MONTH,AUTOMOBILE_COUNT,DRINKING_DRIVER,
                FATAL_COUNT,ILLEGAL_DRUG_RELATED,INJURY_COUNT,FATAL,INJURY)
colnames(dfCrash)<-c("latitude","longitude","Month Crash","No.Cars.Involved","Drinking.Driver",
                     "Death.Count","Drug.Involved","Injury.Count","Fatality.ind","Injury.ind")
#Drop all NA columns
dfCrash<-dfCrash %>% drop_na()

#Create a column with the accident month names (instead of a number)
dfCrash<-mutate(dfCrash,Month.Crash.Name=month.name[dfCrash$`Month Crash`])

#Subset - remove all accident with zero cars 
dfCrash <-subset(dfCrash,dfCrash$No.Cars.Involved > 0)
DF.Crash.subset<-dfCrash

#Create a Factor column to indicate Fatality, Injuries or no Fatalities or injuries 
dfCrash = mutate(dfCrash,Death_Injuries = ifelse(dfCrash$Fatality.ind == 1,"Death",
                               ifelse(dfCrash$Fatality.ind == 0 & dfCrash$Injury.ind==1,"Injury",
                                      ifelse(dfCrash$Fatality.ind == 0 & dfCrash$Injury.ind==0,"None","None"))))
                                              
dfCrash$Death_Injuries<-as.factor(dfCrash$Death_Injuries)
#Calculate the Maximum and Minimum number of cars involved 
#Send it as output to the UI (Slider to select the range of cars involved) 
Max_No_Car <- max(dfCrash$No.Cars.Involved)
Min_No_Car <- min(dfCrash$No.Cars.Involved)

DF.Crash.subset<-dfCrash

str(dfCrash)

```
</font>
<font size = "7">
Summary of accidents per classification 

</font>
```{r echo=FALSE}
table(dfCrash$Death_Injuries)
```

</font>



Shiny App
========================================================

![some caption](ShinyApp.PNG)
